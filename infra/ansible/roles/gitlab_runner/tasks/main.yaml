---
- name: "Install gitlab-runner on docker container"
  block: 
    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - python3
        - python3-pip
        - python3-venv
        - python3-dev
        - python3-setuptools
        - python3-wheel
        - python3-apt
        - python3-docker
        - docker.io
    - name: Update system
      apt:
        update_cache: yes
    - name: Install gitlab-runner
      docker_container:
        name: gitlab-runner
        image: gitlab/gitlab-runner:latest
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /srv/gitlab-runner/config:/etc/gitlab-runner
        restart_policy: always
        state: started
      when: inventory_hostname == 'gitlab'

          
    - name: Start gitlab-runner
      docker_container:
        name: gitlab-runner
        image: gitlab/gitlab-runner:latest
        command: run
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /srv/gitlab-runner/config:/etc/gitlab-runner
        restart_policy: always
        state: started
      when: inventory_hostname == 'gitlab'

    - name: Create personnal_access_token for root
      command: |
          sudo gitlab-rails runner "token = User.find_by_username('rafina_d').personal_access_tokens.create(scopes: ['read_user', 'read_repository', 'create_runner', 'api' ,'read_api'], name: 'token', expires_at: 365.days.from_now); token.set_token('{{ choose_token }}'); token.save!; puts token.token"
      ignore_errors: true
      when: inventory_hostname == 'gitlab'
    
    - name: Create projet for runner
      command: |
          curl -k --request POST --header 'PRIVATE-TOKEN: {{ choose_token }}' --header 'Content-Type: application/json' --data  '{"name": "Project15", "description": "example","namespace": "name", "initialize_with_readme": "true"}' --url "https://{{ external_host }}/api/v4/projects/" 
      ignore_errors: false
      register: project
      when: inventory_hostname == 'gitlab'

    - name: Extract project ID from  stdout
      set_fact:
        project_id: "{{ project.stdout | from_json | json_query('id') }}"
      when: inventory_hostname == 'gitlab'


    - name: Create runner configuration with REST API
      command: |
           sudo curl -k --request POST --url "https://{{ external_host }}/api/v4/user/runners"  --data "project_id={{ project_id }}" --data "runner_type=project_type"      --data "description=<your_runner_description>"   --data "tag_list=<your_comma_separated_job_tags>"   --header "PRIVATE-TOKEN: {{ choose_token }}"
      register: register_token
      when: inventory_hostname == 'gitlab'

    - name: Extract registration token from  stdout
      set_fact:
        register_token: "{{ register_token.stdout | from_json | json_query('token') }}"
      when: inventory_hostname == 'gitlab'

    - name: Register gitlab-runner
      docker_container:
        name: gitlab-runner
        image: gitlab/gitlab-runner:latest
        command: register --non-interactive --executor docker --docker-image "docker:latest" --url "https://{{ external_host }}/" --registration-token "{{ register_token }}" --description "docker-runner" --tag-list "docker" --run-untagged="true" --locked="false" --access-level="not_protected"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /srv/gitlab-runner/config:/etc/gitlab-runner
        restart_policy: always
        state: started
      when: inventory_hostname == 'gitlab'
      